#!/usr/bin/env python2
# -*- coding: utf-8 -*-

"""

    this module will test all the aspect of SEF


    build:  2016/5/7
    author: smileboywtu

"""

import os
import sys
import argparse
from test import test_suit
from SEF import encrypt, decrypt


def get_parser():
    """add all the argument

    """
    # create parser
    parser = argparse.ArgumentParser(description='Tester for the SEF(symmtry encryption based on fountain code)')
    # add argument
    parser.add_argument('-i', dest='in', metavar='input', type=str, help='data input source')
    parser.add_argument('-o', dest='out', metavar='output', type=str, help='data output source')
    parser.add_argument('--encrypt', dest='encrypt', action='store_true', help='perform encrypt action')
    parser.add_argument('--decrypt', dest='decrypt', action='store_true', help='perform decrypt action')
    parser.add_argument('--key', metavar='key', help='encrypt or decrypt key')
    parser.add_argument('--mask', metavar='mask', type=int, help='key mask value less than 8')
    parser.add_argument('--test', action='store_true', help='run test for SEF')

    return parser


def check_input(file):
    """check input argument
    """
    if not os.path.isfile(file):
        errmsg = 'input src error, not a file'
        raise argparse.ArgumentTypeError(errmsg)

    try:
        open(file, 'rb').close()
    except:
        errmsg = 'input src error, can\'t open file for read'
        raise argparse.ArgumentTypeError(errmsg)


def _encrypt(reader, writer, key, mask):
    """encrypt the data
    """
    pass


def _decrypt(reader, writer, key, mask):
    """decrypt the data

    """
    pass


def main():
    """tester enter

    @func
        key -- test for all the keys

    """
    parser = get_parser()
    # parse the argument
    args = vars(parser.parse_args())

    if args['test']:
        test_suit()

    # get the key
    key = args['key']

    if args['in']:
        check_input(args['in'])
        reader = open(args['in'], 'rb')

    if args['out']:
        writer = open(args['out'], 'wb')

    if args['encrypt']:
        _encrypt(reader, writer, key)

    if args['decrypt']:
        _decrypt(reader, writer, key)


if __name__ == '__main__':
    main()
